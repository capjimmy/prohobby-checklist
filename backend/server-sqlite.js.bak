require('dotenv').config();
const express = require('express');
const cors = require('cors');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const { db, initDatabase } = require('./database');

const app = express();
const PORT = process.env.PORT || 5000;

// 미들웨어
app.use(cors());
app.use(express.json());

// 데이터베이스 초기화
initDatabase();

// JWT 인증 미들웨어
function authenticateToken(req, res, next) {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return res.status(401).json({ error: '인증 토큰이 필요합니다' });
  }

  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) {
      return res.status(403).json({ error: '유효하지 않은 토큰입니다' });
    }
    req.user = user;
    next();
  });
}

// ==================== 인증 API ====================

// 회원가입
app.post('/api/register', async (req, res) => {
  try {
    const { name, phone, birthdate, password } = req.body;

    if (!name || !phone || !birthdate || !password) {
      return res.status(400).json({ error: '모든 필드를 입력해주세요' });
    }

    // 전화번호 중복 확인
    const existingUser = db.prepare('SELECT * FROM users WHERE phone = ?').get(phone);
    if (existingUser) {
      return res.status(400).json({ error: '이미 등록된 전화번호입니다' });
    }

    // 비밀번호 해시
    const hashedPassword = await bcrypt.hash(password, 10);

    // 사용자 추가
    const result = db.prepare(
      'INSERT INTO users (name, phone, birthdate, password) VALUES (?, ?, ?, ?)'
    ).run(name, phone, birthdate, hashedPassword);

    res.status(201).json({
      message: '회원가입이 완료되었습니다',
      userId: result.lastInsertRowid
    });
  } catch (error) {
    console.error('Register error:', error);
    res.status(500).json({ error: '서버 오류가 발생했습니다' });
  }
});

// 로그인
app.post('/api/login', async (req, res) => {
  try {
    const { phone, password } = req.body;

    if (!phone || !password) {
      return res.status(400).json({ error: '전화번호와 비밀번호를 입력해주세요' });
    }

    const user = db.prepare('SELECT * FROM users WHERE phone = ?').get(phone);
    if (!user) {
      return res.status(401).json({ error: '전화번호 또는 비밀번호가 잘못되었습니다' });
    }

    const validPassword = await bcrypt.compare(password, user.password);
    if (!validPassword) {
      return res.status(401).json({ error: '전화번호 또는 비밀번호가 잘못되었습니다' });
    }

    const token = jwt.sign(
      { id: user.id, phone: user.phone, isAdmin: user.is_admin },
      process.env.JWT_SECRET,
      { expiresIn: '7d' }
    );

    res.json({
      token,
      user: {
        id: user.id,
        name: user.name,
        phone: user.phone,
        birthdate: user.birthdate,
        isAdmin: user.is_admin
      }
    });
  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({ error: '서버 오류가 발생했습니다' });
  }
});

// ==================== 사용자 API ====================

// 모든 사용자 조회 (작업자 선택용)
app.get('/api/users', authenticateToken, (req, res) => {
  try {
    const users = db.prepare(
      'SELECT id, name, phone, birthdate FROM users ORDER BY name'
    ).all();
    res.json(users);
  } catch (error) {
    console.error('Get users error:', error);
    res.status(500).json({ error: '서버 오류가 발생했습니다' });
  }
});

// 특정 사용자 조회
app.get('/api/users/:id', authenticateToken, (req, res) => {
  try {
    const user = db.prepare(
      'SELECT id, name, phone, birthdate, is_admin FROM users WHERE id = ?'
    ).get(req.params.id);

    if (!user) {
      return res.status(404).json({ error: '사용자를 찾을 수 없습니다' });
    }

    res.json(user);
  } catch (error) {
    console.error('Get user error:', error);
    res.status(500).json({ error: '서버 오류가 발생했습니다' });
  }
});

// ==================== 작업 API ====================

// 작업 목록 조회
app.get('/api/tasks', authenticateToken, (req, res) => {
  try {
    const { status } = req.query;

    let query = `
      SELECT
        t.*,
        u1.name as creator_name,
        u2.name as completer_name
      FROM tasks t
      LEFT JOIN users u1 ON t.creator_id = u1.id
      LEFT JOIN users u2 ON t.completer_id = u2.id
    `;

    if (status && status !== 'all') {
      query += ' WHERE t.status = ?';
      var tasks = db.prepare(query + ' ORDER BY t.created_date DESC').all(status);
    } else {
      var tasks = db.prepare(query + ' ORDER BY t.created_date DESC').all();
    }

    // 각 작업의 작업자 정보 추가
    const tasksWithWorkers = tasks.map(task => {
      const workers = db.prepare(`
        SELECT u.id, u.name, u.phone
        FROM users u
        INNER JOIN task_workers tw ON u.id = tw.worker_id
        WHERE tw.task_id = ?
      `).all(task.id);

      return { ...task, workers };
    });

    res.json(tasksWithWorkers);
  } catch (error) {
    console.error('Get tasks error:', error);
    res.status(500).json({ error: '서버 오류가 발생했습니다' });
  }
});

// 작업 상세 조회
app.get('/api/tasks/:id', authenticateToken, (req, res) => {
  try {
    const task = db.prepare(`
      SELECT
        t.*,
        u1.name as creator_name,
        u2.name as completer_name
      FROM tasks t
      LEFT JOIN users u1 ON t.creator_id = u1.id
      LEFT JOIN users u2 ON t.completer_id = u2.id
      WHERE t.id = ?
    `).get(req.params.id);

    if (!task) {
      return res.status(404).json({ error: '작업을 찾을 수 없습니다' });
    }

    // 작업자 정보 추가
    const workers = db.prepare(`
      SELECT u.id, u.name, u.phone
      FROM users u
      INNER JOIN task_workers tw ON u.id = tw.worker_id
      WHERE tw.task_id = ?
    `).all(task.id);

    res.json({ ...task, workers });
  } catch (error) {
    console.error('Get task error:', error);
    res.status(500).json({ error: '서버 오류가 발생했습니다' });
  }
});

// 작업 생성
app.post('/api/tasks', authenticateToken, (req, res) => {
  try {
    const { title, description, priority, deadline_date, worker_ids } = req.body;

    if (!title || !priority || !deadline_date || !worker_ids || worker_ids.length === 0) {
      return res.status(400).json({ error: '필수 필드를 모두 입력해주세요' });
    }

    // 작업 생성
    const result = db.prepare(`
      INSERT INTO tasks (title, description, priority, deadline_date, creator_id, status)
      VALUES (?, ?, ?, ?, ?, 'in_progress')
    `).run(title, description || '', priority, deadline_date, req.user.id);

    const taskId = result.lastInsertRowid;

    // 작업자 추가
    const insertWorker = db.prepare('INSERT INTO task_workers (task_id, worker_id) VALUES (?, ?)');
    worker_ids.forEach(workerId => {
      insertWorker.run(taskId, workerId);

      // 작업자에게 알림 생성
      db.prepare(`
        INSERT INTO notifications (user_id, task_id, type, message)
        VALUES (?, ?, 'task_assigned', ?)
      `).run(workerId, taskId, `새로운 작업이 할당되었습니다: ${title}`);
    });

    res.status(201).json({
      message: '작업이 생성되었습니다',
      taskId
    });
  } catch (error) {
    console.error('Create task error:', error);
    res.status(500).json({ error: '서버 오류가 발생했습니다' });
  }
});

// 작업 완료
app.put('/api/tasks/:id/complete', authenticateToken, (req, res) => {
  try {
    const taskId = req.params.id;
    const task = db.prepare('SELECT * FROM tasks WHERE id = ?').get(taskId);

    if (!task) {
      return res.status(404).json({ error: '작업을 찾을 수 없습니다' });
    }

    // 작업 완료 처리
    db.prepare(`
      UPDATE tasks
      SET status = 'completed', completer_id = ?, completed_date = CURRENT_TIMESTAMP
      WHERE id = ?
    `).run(req.user.id, taskId);

    // 작업자들에게 알림
    const workers = db.prepare(`
      SELECT worker_id FROM task_workers WHERE task_id = ?
    `).all(taskId);

    const insertNotification = db.prepare(`
      INSERT INTO notifications (user_id, task_id, type, message)
      VALUES (?, ?, 'task_completed', ?)
    `);

    workers.forEach(worker => {
      insertNotification.run(worker.worker_id, taskId, `작업이 완료되었습니다: ${task.title}`);
    });

    res.json({ message: '작업이 완료되었습니다' });
  } catch (error) {
    console.error('Complete task error:', error);
    res.status(500).json({ error: '서버 오류가 발생했습니다' });
  }
});

// 작업 수정
app.put('/api/tasks/:id', authenticateToken, (req, res) => {
  try {
    const { title, description, priority, deadline_date, status, worker_ids } = req.body;
    const taskId = req.params.id;

    const task = db.prepare('SELECT * FROM tasks WHERE id = ?').get(taskId);
    if (!task) {
      return res.status(404).json({ error: '작업을 찾을 수 없습니다' });
    }

    // 작업 정보 수정
    db.prepare(`
      UPDATE tasks
      SET title = ?, description = ?, priority = ?, deadline_date = ?, status = ?
      WHERE id = ?
    `).run(title, description || '', priority, deadline_date, status || task.status, taskId);

    // 기존 작업자 삭제
    db.prepare('DELETE FROM task_workers WHERE task_id = ?').run(taskId);

    // 새 작업자 추가
    if (worker_ids && worker_ids.length > 0) {
      const insertWorker = db.prepare('INSERT INTO task_workers (task_id, worker_id) VALUES (?, ?)');
      worker_ids.forEach(workerId => {
        insertWorker.run(taskId, workerId);
      });
    }

    res.json({ message: '작업이 수정되었습니다' });
  } catch (error) {
    console.error('Update task error:', error);
    res.status(500).json({ error: '서버 오류가 발생했습니다' });
  }
});

// 작업 삭제
app.delete('/api/tasks/:id', authenticateToken, (req, res) => {
  try {
    const task = db.prepare('SELECT * FROM tasks WHERE id = ?').get(req.params.id);
    if (!task) {
      return res.status(404).json({ error: '작업을 찾을 수 없습니다' });
    }

    db.prepare('DELETE FROM tasks WHERE id = ?').run(req.params.id);
    res.json({ message: '작업이 삭제되었습니다' });
  } catch (error) {
    console.error('Delete task error:', error);
    res.status(500).json({ error: '서버 오류가 발생했습니다' });
  }
});

// ==================== 알림 API ====================

// 사용자 알림 조회
app.get('/api/notifications', authenticateToken, (req, res) => {
  try {
    const notifications = db.prepare(`
      SELECT
        n.*,
        t.title as task_title
      FROM notifications n
      LEFT JOIN tasks t ON n.task_id = t.id
      WHERE n.user_id = ?
      ORDER BY n.created_at DESC
      LIMIT 50
    `).all(req.user.id);

    res.json(notifications);
  } catch (error) {
    console.error('Get notifications error:', error);
    res.status(500).json({ error: '서버 오류가 발생했습니다' });
  }
});

// 알림 읽음 처리
app.put('/api/notifications/:id/read', authenticateToken, (req, res) => {
  try {
    db.prepare('UPDATE notifications SET is_read = 1 WHERE id = ? AND user_id = ?')
      .run(req.params.id, req.user.id);
    res.json({ message: '알림을 읽음 처리했습니다' });
  } catch (error) {
    console.error('Mark notification read error:', error);
    res.status(500).json({ error: '서버 오류가 발생했습니다' });
  }
});

// 독촉 기능
app.post('/api/tasks/:id/nudge', authenticateToken, (req, res) => {
  try {
    const taskId = req.params.id;
    const task = db.prepare('SELECT * FROM tasks WHERE id = ?').get(taskId);

    if (!task) {
      return res.status(404).json({ error: '작업을 찾을 수 없습니다' });
    }

    // 작업자들에게 독촉 알림
    const workers = db.prepare(`
      SELECT worker_id FROM task_workers WHERE task_id = ?
    `).all(taskId);

    const insertNotification = db.prepare(`
      INSERT INTO notifications (user_id, task_id, type, message)
      VALUES (?, ?, 'nudge', ?)
    `);

    workers.forEach(worker => {
      insertNotification.run(worker.worker_id, taskId, `작업 독촉: ${task.title}`);
    });

    res.json({ message: '독촉 알림을 보냈습니다' });
  } catch (error) {
    console.error('Nudge error:', error);
    res.status(500).json({ error: '서버 오류가 발생했습니다' });
  }
});

// ==================== 서버 시작 ====================

app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});
